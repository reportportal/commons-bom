# Copyright 2025 EPAM Systems
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Publish to Maven Central

on:
  release:
    types: [created]
  push:
    branches:
      - fix/publish
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version to publish'
        required: true
        type: string

env:
  SONATYPE_URL: 'https://central.sonatype.com'
  PACKAGE: 'com.epam.reportportal'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Java for publishing to Maven Central
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          server-id: ossrh
          server-username: ${{ secrets.MAVEN_USERNAME }}
          server-password: ${{ secrets.MAVEN_PASSWORD }}
          
      - name: Setup GPG
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          
      - name: Configure Maven settings
        run: |
          # Set version based on trigger type
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION="5.14.4"
            echo "Push trigger detected - using version: $VERSION"
          else
            VERSION="${{ github.event.inputs.version }}"
            echo "Manual trigger detected - using version: $VERSION"
          fi
          
          # Update pom.xml version
          if [ -n "$VERSION" ]; then
            mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false
            echo "Updated pom.xml version to: $VERSION"
          fi
          
          # Verify distribution management configuration
          echo "Verifying distribution management configuration..."
          if grep -q "<id>ossrh</id>" pom.xml; then
            echo "✓ Maven Central distribution management found"
          else
            echo "⚠ Maven Central distribution management not found"
          fi
          
      - name: Build and publish to Maven Central
        run: |
          mvn clean deploy -Pdeploy
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USER }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          
      - name: Verify deployment
        run: |
          echo "Waiting for artifacts to be available in Maven Central..."
          sleep 30
          
          # Check if artifacts are available (basic check)
          ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          GROUP_ID=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout)
          
          echo "Checking availability of $GROUP_ID:$ARTIFACT_ID:$VERSION"
          
          # Note: Maven Central has a delay, so this is just a basic verification
          echo "Deployment completed. Artifacts will be available in Maven Central shortly." 